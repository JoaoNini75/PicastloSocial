/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateImageDTO,
  CreatePipeDTO,
  CreatePostDTO,
  GroupDTO,
  GroupMembershipDTO,
  ImageDTO,
  InviteResponse,
  PageGroupMembershipDTO,
  PageImageDTO,
  PagePipelineDTO,
  PagePostDTO,
  PageUserDTO,
  PipelineDTO,
  PostDTO,
  UserCreateDTO,
  UserDTO,
  UserUpdateDTO,
} from '../models/index';
import {
    CreateImageDTOFromJSON,
    CreateImageDTOToJSON,
    CreatePipeDTOFromJSON,
    CreatePipeDTOToJSON,
    CreatePostDTOFromJSON,
    CreatePostDTOToJSON,
    GroupDTOFromJSON,
    GroupDTOToJSON,
    GroupMembershipDTOFromJSON,
    GroupMembershipDTOToJSON,
    ImageDTOFromJSON,
    ImageDTOToJSON,
    InviteResponseFromJSON,
    InviteResponseToJSON,
    PageGroupMembershipDTOFromJSON,
    PageGroupMembershipDTOToJSON,
    PageImageDTOFromJSON,
    PageImageDTOToJSON,
    PagePipelineDTOFromJSON,
    PagePipelineDTOToJSON,
    PagePostDTOFromJSON,
    PagePostDTOToJSON,
    PageUserDTOFromJSON,
    PageUserDTOToJSON,
    PipelineDTOFromJSON,
    PipelineDTOToJSON,
    PostDTOFromJSON,
    PostDTOToJSON,
    UserCreateDTOFromJSON,
    UserCreateDTOToJSON,
    UserDTOFromJSON,
    UserDTOToJSON,
    UserUpdateDTOFromJSON,
    UserUpdateDTOToJSON,
} from '../models/index';

export interface AddMemberToGroupRequest {
    id: number;
    username: string;
}

export interface CreateGroupRequest {
    groupDTO: GroupDTO;
}

export interface CreateImageRequest {
    createImageDTO: CreateImageDTO;
}

export interface CreatePipelineRequest {
    createPipeDTO: CreatePipeDTO;
}

export interface CreatePostRequest {
    createPostDTO: CreatePostDTO;
}

export interface DeleteGroupIdRequest {
    id: number;
}

export interface DeleteGroupMemberRequest {
    id: number;
    username: string;
}

export interface DeleteImageRequest {
    id: number;
}

export interface DeletePipelineRequest {
    id: number;
}

export interface DeletePostRequest {
    id: number;
}

export interface DeleteUserRequest {
    username: string;
}

export interface DeleteUserusernameFriendsfriendUsernameRequest {
    username: string;
    friendUsername: string;
}

export interface GetFriendsPostsRequest {
    page?: number;
    size?: number;
}

export interface GetGroupIdRequest {
    id: number;
}

export interface GetGroupPostsRequest {
    groupID: number;
    page?: number;
    size?: number;
}

export interface GetImageByIdRequest {
    id: number;
}

export interface GetImagesByIdsRequest {
    ids: Array<number>;
}

export interface GetPipelineByIdRequest {
    id: number;
}

export interface GetPipelinesByIdsRequest {
    ids: Array<number>;
}

export interface GetPipelinesByUserRequest {
    username: string;
    page?: number;
    size?: number;
}

export interface GetPostByIdRequest {
    id: number;
}

export interface GetPostsRequest {
    page?: number;
    size?: number;
}

export interface GetPublicPostsRequest {
    page?: number;
    size?: number;
}

export interface GetUserRequest {
    username: string;
}

export interface GetUserImagesRequest {
    username: string;
    page?: number;
    size?: number;
}

export interface GetUserPostsRequest {
    username: string;
    page?: number;
    size?: number;
}

export interface ListAllFriendshipsRequest {
    page?: number;
    size?: number;
}

export interface ListGroupMembersRequest {
    id: number;
    page?: number;
    size?: number;
}

export interface ListImagesRequest {
    page?: number;
    size?: number;
}

export interface ListPipelinesRequest {
    page?: number;
    size?: number;
}

export interface ListUserGroupsRequest {
    username: string;
    page?: number;
    size?: number;
}

export interface ListUsersRequest {
    page?: number;
    size?: number;
}

export interface ListUserusernameFriendsRequest {
    username: string;
    page?: number;
    size?: number;
}

export interface ListUserusernameFriendshipInvitesRequest {
    username: string;
    page?: number;
    size?: number;
}

export interface PostUserRequest {
    userCreateDTO: UserCreateDTO;
}

export interface PostUserusernameFriendsfriendUsernameRequest {
    username: string;
    friendUsername: string;
}

export interface PutUserusernameRequest {
    username: string;
    userUpdateDTO: UserUpdateDTO;
}

export interface PutUserusernameFriendsfriendUsernameRequest {
    username: string;
    friendUsername: string;
    inviteResponse: InviteResponse;
}

export interface SearchUsersRequest {
    filter: string;
    page?: number;
    size?: number;
}

export interface UpdateGroupRequest {
    id: number;
    groupDTO: GroupDTO;
}

export interface UpdateImageByIdRequest {
    id: number;
    imageDTO: ImageDTO;
}

export interface UpdatePipelineByIdRequest {
    id: number;
    pipelineDTO: PipelineDTO;
}

export interface UpdatePostByIdRequest {
    id: number;
    postDTO: PostDTO;
}

/**
 * 
 */
export class UserControllerApi extends runtime.BaseAPI {

    /**
     */
    async addMemberToGroupRaw(requestParameters: AddMemberToGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GroupMembershipDTO>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling addMemberToGroup().'
            );
        }

        if (requestParameters['username'] == null) {
            throw new runtime.RequiredError(
                'username',
                'Required parameter "username" was null or undefined when calling addMemberToGroup().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['username'] != null) {
            queryParameters['username'] = requestParameters['username'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/groupAPI/{id}/members`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GroupMembershipDTOFromJSON(jsonValue));
    }

    /**
     */
    async addMemberToGroup(requestParameters: AddMemberToGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GroupMembershipDTO> {
        const response = await this.addMemberToGroupRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async createGroupRaw(requestParameters: CreateGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GroupDTO>> {
        if (requestParameters['groupDTO'] == null) {
            throw new runtime.RequiredError(
                'groupDTO',
                'Required parameter "groupDTO" was null or undefined when calling createGroup().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/groupAPI/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GroupDTOToJSON(requestParameters['groupDTO']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GroupDTOFromJSON(jsonValue));
    }

    /**
     */
    async createGroup(requestParameters: CreateGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GroupDTO> {
        const response = await this.createGroupRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async createImageRaw(requestParameters: CreateImageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ImageDTO>> {
        if (requestParameters['createImageDTO'] == null) {
            throw new runtime.RequiredError(
                'createImageDTO',
                'Required parameter "createImageDTO" was null or undefined when calling createImage().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/imageAPI`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateImageDTOToJSON(requestParameters['createImageDTO']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ImageDTOFromJSON(jsonValue));
    }

    /**
     */
    async createImage(requestParameters: CreateImageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ImageDTO> {
        const response = await this.createImageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async createPipelineRaw(requestParameters: CreatePipelineRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PipelineDTO>> {
        if (requestParameters['createPipeDTO'] == null) {
            throw new runtime.RequiredError(
                'createPipeDTO',
                'Required parameter "createPipeDTO" was null or undefined when calling createPipeline().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/pipelineAPI`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreatePipeDTOToJSON(requestParameters['createPipeDTO']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PipelineDTOFromJSON(jsonValue));
    }

    /**
     */
    async createPipeline(requestParameters: CreatePipelineRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PipelineDTO> {
        const response = await this.createPipelineRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async createPostRaw(requestParameters: CreatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PostDTO>> {
        if (requestParameters['createPostDTO'] == null) {
            throw new runtime.RequiredError(
                'createPostDTO',
                'Required parameter "createPostDTO" was null or undefined when calling createPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/postAPI`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreatePostDTOToJSON(requestParameters['createPostDTO']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PostDTOFromJSON(jsonValue));
    }

    /**
     */
    async createPost(requestParameters: CreatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PostDTO> {
        const response = await this.createPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async deleteGroupIdRaw(requestParameters: DeleteGroupIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GroupDTO>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteGroupId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/groupAPI/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GroupDTOFromJSON(jsonValue));
    }

    /**
     */
    async deleteGroupId(requestParameters: DeleteGroupIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GroupDTO> {
        const response = await this.deleteGroupIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async deleteGroupMemberRaw(requestParameters: DeleteGroupMemberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GroupMembershipDTO>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteGroupMember().'
            );
        }

        if (requestParameters['username'] == null) {
            throw new runtime.RequiredError(
                'username',
                'Required parameter "username" was null or undefined when calling deleteGroupMember().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['username'] != null) {
            queryParameters['username'] = requestParameters['username'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/groupAPI/{id}/members`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GroupMembershipDTOFromJSON(jsonValue));
    }

    /**
     */
    async deleteGroupMember(requestParameters: DeleteGroupMemberRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GroupMembershipDTO> {
        const response = await this.deleteGroupMemberRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async deleteImageRaw(requestParameters: DeleteImageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ImageDTO>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteImage().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/imageAPI/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ImageDTOFromJSON(jsonValue));
    }

    /**
     */
    async deleteImage(requestParameters: DeleteImageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ImageDTO> {
        const response = await this.deleteImageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async deletePipelineRaw(requestParameters: DeletePipelineRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PipelineDTO>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deletePipeline().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/pipelineAPI/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PipelineDTOFromJSON(jsonValue));
    }

    /**
     */
    async deletePipeline(requestParameters: DeletePipelineRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PipelineDTO> {
        const response = await this.deletePipelineRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async deletePostRaw(requestParameters: DeletePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PostDTO>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deletePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/postAPI/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PostDTOFromJSON(jsonValue));
    }

    /**
     */
    async deletePost(requestParameters: DeletePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PostDTO> {
        const response = await this.deletePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Deletes a user given its username
     * Delete User
     */
    async deleteUserRaw(requestParameters: DeleteUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserDTO>> {
        if (requestParameters['username'] == null) {
            throw new runtime.RequiredError(
                'username',
                'Required parameter "username" was null or undefined when calling deleteUser().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/user/{username}`.replace(`{${"username"}}`, encodeURIComponent(String(requestParameters['username']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserDTOFromJSON(jsonValue));
    }

    /**
     * Deletes a user given its username
     * Delete User
     */
    async deleteUser(requestParameters: DeleteUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserDTO> {
        const response = await this.deleteUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a friendship between two users whose usernames are given by username and friendUsername
     * Remove Friendship
     */
    async deleteUserusernameFriendsfriendUsernameRaw(requestParameters: DeleteUserusernameFriendsfriendUsernameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['username'] == null) {
            throw new runtime.RequiredError(
                'username',
                'Required parameter "username" was null or undefined when calling deleteUserusernameFriendsfriendUsername().'
            );
        }

        if (requestParameters['friendUsername'] == null) {
            throw new runtime.RequiredError(
                'friendUsername',
                'Required parameter "friendUsername" was null or undefined when calling deleteUserusernameFriendsfriendUsername().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/user/{username}/friends/{friendUsername}`.replace(`{${"username"}}`, encodeURIComponent(String(requestParameters['username']))).replace(`{${"friendUsername"}}`, encodeURIComponent(String(requestParameters['friendUsername']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Delete a friendship between two users whose usernames are given by username and friendUsername
     * Remove Friendship
     */
    async deleteUserusernameFriendsfriendUsername(requestParameters: DeleteUserusernameFriendsfriendUsernameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.deleteUserusernameFriendsfriendUsernameRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getFriendsPostsRaw(requestParameters: GetFriendsPostsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PagePostDTO>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/postAPI/friends`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PagePostDTOFromJSON(jsonValue));
    }

    /**
     */
    async getFriendsPosts(requestParameters: GetFriendsPostsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PagePostDTO> {
        const response = await this.getFriendsPostsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getGroupIdRaw(requestParameters: GetGroupIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GroupDTO>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getGroupId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/groupAPI/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GroupDTOFromJSON(jsonValue));
    }

    /**
     */
    async getGroupId(requestParameters: GetGroupIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GroupDTO> {
        const response = await this.getGroupIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getGroupPostsRaw(requestParameters: GetGroupPostsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PagePostDTO>> {
        if (requestParameters['groupID'] == null) {
            throw new runtime.RequiredError(
                'groupID',
                'Required parameter "groupID" was null or undefined when calling getGroupPosts().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/postAPI/group/{groupID}`.replace(`{${"groupID"}}`, encodeURIComponent(String(requestParameters['groupID']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PagePostDTOFromJSON(jsonValue));
    }

    /**
     */
    async getGroupPosts(requestParameters: GetGroupPostsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PagePostDTO> {
        const response = await this.getGroupPostsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getImageByIdRaw(requestParameters: GetImageByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ImageDTO>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getImageById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/imageAPI/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ImageDTOFromJSON(jsonValue));
    }

    /**
     */
    async getImageById(requestParameters: GetImageByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ImageDTO> {
        const response = await this.getImageByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getImagesByIdsRaw(requestParameters: GetImagesByIdsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<ImageDTO>>> {
        if (requestParameters['ids'] == null) {
            throw new runtime.RequiredError(
                'ids',
                'Required parameter "ids" was null or undefined when calling getImagesByIds().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['ids'] != null) {
            queryParameters['ids'] = requestParameters['ids'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/imageAPI/ids`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ImageDTOFromJSON));
    }

    /**
     */
    async getImagesByIds(requestParameters: GetImagesByIdsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<ImageDTO>> {
        const response = await this.getImagesByIdsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getPipelineByIdRaw(requestParameters: GetPipelineByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PipelineDTO>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getPipelineById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/pipelineAPI/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PipelineDTOFromJSON(jsonValue));
    }

    /**
     */
    async getPipelineById(requestParameters: GetPipelineByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PipelineDTO> {
        const response = await this.getPipelineByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getPipelinesByIdsRaw(requestParameters: GetPipelinesByIdsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PipelineDTO>>> {
        if (requestParameters['ids'] == null) {
            throw new runtime.RequiredError(
                'ids',
                'Required parameter "ids" was null or undefined when calling getPipelinesByIds().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['ids'] != null) {
            queryParameters['ids'] = requestParameters['ids'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/pipelineAPI/ids`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PipelineDTOFromJSON));
    }

    /**
     */
    async getPipelinesByIds(requestParameters: GetPipelinesByIdsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PipelineDTO>> {
        const response = await this.getPipelinesByIdsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getPipelinesByUserRaw(requestParameters: GetPipelinesByUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PagePipelineDTO>> {
        if (requestParameters['username'] == null) {
            throw new runtime.RequiredError(
                'username',
                'Required parameter "username" was null or undefined when calling getPipelinesByUser().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/pipelineAPI/user/{username}`.replace(`{${"username"}}`, encodeURIComponent(String(requestParameters['username']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PagePipelineDTOFromJSON(jsonValue));
    }

    /**
     */
    async getPipelinesByUser(requestParameters: GetPipelinesByUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PagePipelineDTO> {
        const response = await this.getPipelinesByUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getPostByIdRaw(requestParameters: GetPostByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PostDTO>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getPostById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/postAPI/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PostDTOFromJSON(jsonValue));
    }

    /**
     */
    async getPostById(requestParameters: GetPostByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PostDTO> {
        const response = await this.getPostByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getPostsRaw(requestParameters: GetPostsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PagePostDTO>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/postAPI`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PagePostDTOFromJSON(jsonValue));
    }

    /**
     */
    async getPosts(requestParameters: GetPostsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PagePostDTO> {
        const response = await this.getPostsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getPublicPostsRaw(requestParameters: GetPublicPostsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PagePostDTO>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/postAPI/public`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PagePostDTOFromJSON(jsonValue));
    }

    /**
     */
    async getPublicPosts(requestParameters: GetPublicPostsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PagePostDTO> {
        const response = await this.getPublicPostsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * get the data of a user given its username
     * Get User
     */
    async getUserRaw(requestParameters: GetUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserDTO>> {
        if (requestParameters['username'] == null) {
            throw new runtime.RequiredError(
                'username',
                'Required parameter "username" was null or undefined when calling getUser().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/user/{username}`.replace(`{${"username"}}`, encodeURIComponent(String(requestParameters['username']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserDTOFromJSON(jsonValue));
    }

    /**
     * get the data of a user given its username
     * Get User
     */
    async getUser(requestParameters: GetUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserDTO> {
        const response = await this.getUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getUserImagesRaw(requestParameters: GetUserImagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PageImageDTO>> {
        if (requestParameters['username'] == null) {
            throw new runtime.RequiredError(
                'username',
                'Required parameter "username" was null or undefined when calling getUserImages().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/imageAPI/user/{username}`.replace(`{${"username"}}`, encodeURIComponent(String(requestParameters['username']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PageImageDTOFromJSON(jsonValue));
    }

    /**
     */
    async getUserImages(requestParameters: GetUserImagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PageImageDTO> {
        const response = await this.getUserImagesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getUserPostsRaw(requestParameters: GetUserPostsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PagePostDTO>> {
        if (requestParameters['username'] == null) {
            throw new runtime.RequiredError(
                'username',
                'Required parameter "username" was null or undefined when calling getUserPosts().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/postAPI/user/{username}`.replace(`{${"username"}}`, encodeURIComponent(String(requestParameters['username']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PagePostDTOFromJSON(jsonValue));
    }

    /**
     */
    async getUserPosts(requestParameters: GetUserPostsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PagePostDTO> {
        const response = await this.getUserPostsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async helloRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/hello`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async hello(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.helloRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async helloGroupRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/groupAPI/hello`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async helloGroup(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.helloGroupRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async helloImageRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/imageAPI/hello`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async helloImage(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.helloImageRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async helloPipelineRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/pipelineAPI/hello`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async helloPipeline(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.helloPipelineRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async helloPostRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/postAPI/hello`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async helloPost(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.helloPostRaw(initOverrides);
        return await response.value();
    }

    /**
     * list all friendships in the application (more for debug than for actual use)
     * List All Friendships
     */
    async listAllFriendshipsRaw(requestParameters: ListAllFriendshipsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<UserDTO>>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/friendships`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UserDTOFromJSON));
    }

    /**
     * list all friendships in the application (more for debug than for actual use)
     * List All Friendships
     */
    async listAllFriendships(requestParameters: ListAllFriendshipsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<UserDTO>> {
        const response = await this.listAllFriendshipsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async listGroupMembersRaw(requestParameters: ListGroupMembersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PageGroupMembershipDTO>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling listGroupMembers().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/groupAPI/{id}/members`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PageGroupMembershipDTOFromJSON(jsonValue));
    }

    /**
     */
    async listGroupMembers(requestParameters: ListGroupMembersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PageGroupMembershipDTO> {
        const response = await this.listGroupMembersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async listImagesRaw(requestParameters: ListImagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PageImageDTO>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/imageAPI`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PageImageDTOFromJSON(jsonValue));
    }

    /**
     */
    async listImages(requestParameters: ListImagesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PageImageDTO> {
        const response = await this.listImagesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async listPipelinesRaw(requestParameters: ListPipelinesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PagePipelineDTO>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/pipelineAPI`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PagePipelineDTOFromJSON(jsonValue));
    }

    /**
     */
    async listPipelines(requestParameters: ListPipelinesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PagePipelineDTO> {
        const response = await this.listPipelinesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async listUserGroupsRaw(requestParameters: ListUserGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PageGroupMembershipDTO>> {
        if (requestParameters['username'] == null) {
            throw new runtime.RequiredError(
                'username',
                'Required parameter "username" was null or undefined when calling listUserGroups().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/groupAPI/{username}/groups`.replace(`{${"username"}}`, encodeURIComponent(String(requestParameters['username']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PageGroupMembershipDTOFromJSON(jsonValue));
    }

    /**
     */
    async listUserGroups(requestParameters: ListUserGroupsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PageGroupMembershipDTO> {
        const response = await this.listUserGroupsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List all users in the application
     * List Users
     */
    async listUsersRaw(requestParameters: ListUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PageUserDTO>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/user`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PageUserDTOFromJSON(jsonValue));
    }

    /**
     * List all users in the application
     * List Users
     */
    async listUsers(requestParameters: ListUsersRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PageUserDTO> {
        const response = await this.listUsersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * list the friends of a user given its username (only friendships where there was a positive response to the invite
     * List User Friends
     */
    async listUserusernameFriendsRaw(requestParameters: ListUserusernameFriendsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<UserDTO>>> {
        if (requestParameters['username'] == null) {
            throw new runtime.RequiredError(
                'username',
                'Required parameter "username" was null or undefined when calling listUserusernameFriends().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/user/{username}/friends`.replace(`{${"username"}}`, encodeURIComponent(String(requestParameters['username']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UserDTOFromJSON));
    }

    /**
     * list the friends of a user given its username (only friendships where there was a positive response to the invite
     * List User Friends
     */
    async listUserusernameFriends(requestParameters: ListUserusernameFriendsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<UserDTO>> {
        const response = await this.listUserusernameFriendsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * list the friendship invites of a user
     * List User Friendship Invites
     */
    async listUserusernameFriendshipInvitesRaw(requestParameters: ListUserusernameFriendshipInvitesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<UserDTO>>> {
        if (requestParameters['username'] == null) {
            throw new runtime.RequiredError(
                'username',
                'Required parameter "username" was null or undefined when calling listUserusernameFriendshipInvites().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/user/{username}/friends/invites`.replace(`{${"username"}}`, encodeURIComponent(String(requestParameters['username']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UserDTOFromJSON));
    }

    /**
     * list the friendship invites of a user
     * List User Friendship Invites
     */
    async listUserusernameFriendshipInvites(requestParameters: ListUserusernameFriendshipInvitesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<UserDTO>> {
        const response = await this.listUserusernameFriendshipInvitesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create/register a user in the application
     * Create User
     */
    async postUserRaw(requestParameters: PostUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserDTO>> {
        if (requestParameters['userCreateDTO'] == null) {
            throw new runtime.RequiredError(
                'userCreateDTO',
                'Required parameter "userCreateDTO" was null or undefined when calling postUser().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/user`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserCreateDTOToJSON(requestParameters['userCreateDTO']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserDTOFromJSON(jsonValue));
    }

    /**
     * Create/register a user in the application
     * Create User
     */
    async postUser(requestParameters: PostUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserDTO> {
        const response = await this.postUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Send a friendship invite from username to friendUsername
     * Send Friendship Invite
     */
    async postUserusernameFriendsfriendUsernameRaw(requestParameters: PostUserusernameFriendsfriendUsernameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['username'] == null) {
            throw new runtime.RequiredError(
                'username',
                'Required parameter "username" was null or undefined when calling postUserusernameFriendsfriendUsername().'
            );
        }

        if (requestParameters['friendUsername'] == null) {
            throw new runtime.RequiredError(
                'friendUsername',
                'Required parameter "friendUsername" was null or undefined when calling postUserusernameFriendsfriendUsername().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/user/{username}/friends/{friendUsername}`.replace(`{${"username"}}`, encodeURIComponent(String(requestParameters['username']))).replace(`{${"friendUsername"}}`, encodeURIComponent(String(requestParameters['friendUsername']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Send a friendship invite from username to friendUsername
     * Send Friendship Invite
     */
    async postUserusernameFriendsfriendUsername(requestParameters: PostUserusernameFriendsfriendUsernameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.postUserusernameFriendsfriendUsernameRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update the data of the user given its username
     * Update User
     */
    async putUserusernameRaw(requestParameters: PutUserusernameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserDTO>> {
        if (requestParameters['username'] == null) {
            throw new runtime.RequiredError(
                'username',
                'Required parameter "username" was null or undefined when calling putUserusername().'
            );
        }

        if (requestParameters['userUpdateDTO'] == null) {
            throw new runtime.RequiredError(
                'userUpdateDTO',
                'Required parameter "userUpdateDTO" was null or undefined when calling putUserusername().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/user/{username}`.replace(`{${"username"}}`, encodeURIComponent(String(requestParameters['username']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UserUpdateDTOToJSON(requestParameters['userUpdateDTO']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserDTOFromJSON(jsonValue));
    }

    /**
     * Update the data of the user given its username
     * Update User
     */
    async putUserusername(requestParameters: PutUserusernameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserDTO> {
        const response = await this.putUserusernameRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * username responds to friendship invite from friendUsername
     * Respond to Friendship Invite
     */
    async putUserusernameFriendsfriendUsernameRaw(requestParameters: PutUserusernameFriendsfriendUsernameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['username'] == null) {
            throw new runtime.RequiredError(
                'username',
                'Required parameter "username" was null or undefined when calling putUserusernameFriendsfriendUsername().'
            );
        }

        if (requestParameters['friendUsername'] == null) {
            throw new runtime.RequiredError(
                'friendUsername',
                'Required parameter "friendUsername" was null or undefined when calling putUserusernameFriendsfriendUsername().'
            );
        }

        if (requestParameters['inviteResponse'] == null) {
            throw new runtime.RequiredError(
                'inviteResponse',
                'Required parameter "inviteResponse" was null or undefined when calling putUserusernameFriendsfriendUsername().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/user/{username}/friends/{friendUsername}`.replace(`{${"username"}}`, encodeURIComponent(String(requestParameters['username']))).replace(`{${"friendUsername"}}`, encodeURIComponent(String(requestParameters['friendUsername']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: InviteResponseToJSON(requestParameters['inviteResponse']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * username responds to friendship invite from friendUsername
     * Respond to Friendship Invite
     */
    async putUserusernameFriendsfriendUsername(requestParameters: PutUserusernameFriendsfriendUsernameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.putUserusernameFriendsfriendUsernameRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Search for users by username or name using a text filter
     * Search Users
     */
    async searchUsersRaw(requestParameters: SearchUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PageUserDTO>> {
        if (requestParameters['filter'] == null) {
            throw new runtime.RequiredError(
                'filter',
                'Required parameter "filter" was null or undefined when calling searchUsers().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['filter'] != null) {
            queryParameters['filter'] = requestParameters['filter'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/user/search`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PageUserDTOFromJSON(jsonValue));
    }

    /**
     * Search for users by username or name using a text filter
     * Search Users
     */
    async searchUsers(requestParameters: SearchUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PageUserDTO> {
        const response = await this.searchUsersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateGroupRaw(requestParameters: UpdateGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GroupDTO>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updateGroup().'
            );
        }

        if (requestParameters['groupDTO'] == null) {
            throw new runtime.RequiredError(
                'groupDTO',
                'Required parameter "groupDTO" was null or undefined when calling updateGroup().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/groupAPI/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: GroupDTOToJSON(requestParameters['groupDTO']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GroupDTOFromJSON(jsonValue));
    }

    /**
     */
    async updateGroup(requestParameters: UpdateGroupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GroupDTO> {
        const response = await this.updateGroupRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateImageByIdRaw(requestParameters: UpdateImageByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ImageDTO>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updateImageById().'
            );
        }

        if (requestParameters['imageDTO'] == null) {
            throw new runtime.RequiredError(
                'imageDTO',
                'Required parameter "imageDTO" was null or undefined when calling updateImageById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/imageAPI/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ImageDTOToJSON(requestParameters['imageDTO']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ImageDTOFromJSON(jsonValue));
    }

    /**
     */
    async updateImageById(requestParameters: UpdateImageByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ImageDTO> {
        const response = await this.updateImageByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updatePipelineByIdRaw(requestParameters: UpdatePipelineByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PipelineDTO>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updatePipelineById().'
            );
        }

        if (requestParameters['pipelineDTO'] == null) {
            throw new runtime.RequiredError(
                'pipelineDTO',
                'Required parameter "pipelineDTO" was null or undefined when calling updatePipelineById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/pipelineAPI/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PipelineDTOToJSON(requestParameters['pipelineDTO']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PipelineDTOFromJSON(jsonValue));
    }

    /**
     */
    async updatePipelineById(requestParameters: UpdatePipelineByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PipelineDTO> {
        const response = await this.updatePipelineByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updatePostByIdRaw(requestParameters: UpdatePostByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PostDTO>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updatePostById().'
            );
        }

        if (requestParameters['postDTO'] == null) {
            throw new runtime.RequiredError(
                'postDTO',
                'Required parameter "postDTO" was null or undefined when calling updatePostById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/postAPI/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PostDTOToJSON(requestParameters['postDTO']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PostDTOFromJSON(jsonValue));
    }

    /**
     */
    async updatePostById(requestParameters: UpdatePostByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PostDTO> {
        const response = await this.updatePostByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
