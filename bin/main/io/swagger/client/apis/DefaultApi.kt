/**
 * CIAI Project API
 * This is the API for the CIAI Project 2024/2025.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: you@your-company.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package io.swagger.client.apis

import io.swagger.client.models.Blob
import io.swagger.client.models.InviteResponse
import io.swagger.client.models.Group
import io.swagger.client.models.GroupMembership
import io.swagger.client.models.Image
import io.swagger.client.models.Pipeline
import io.swagger.client.models.Post
import io.swagger.client.models.User

import io.swagger.client.infrastructure.*

class DefaultApi(basePath: kotlin.String = "https://virtserver.swaggerhub.com/JNINI/CIAI_Project/1.0.0") : ApiClient(basePath) {

    /**
     * Create Image
     * 
     * @param body  (optional)
     * @return void
     */
    fun create Image(body: Image? = null): Unit {
        val localVariableBody: kotlin.Any? = body
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/image/"
        )
        val response = request<Any?>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Create Pipeline
     * 
     * @param body  (optional)
     * @return void
     */
    fun create Pipeline(body: Pipeline? = null): Unit {
        val localVariableBody: kotlin.Any? = body
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/pipeline/"
        )
        val response = request<Any?>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Delete Image
     * 
     * @param id  
     * @return void
     */
    fun delete Image(id: kotlin.Long): Unit {
        val localVariableConfig = RequestConfig(
                RequestMethod.DELETE,
                "/image/{id}".replace("{" + "id" + "}", "$id")
        )
        val response = request<Any?>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Delete Pipeline
     * 
     * @param id  
     * @return void
     */
    fun delete Pipeline(id: kotlin.Long): Unit {
        val localVariableConfig = RequestConfig(
                RequestMethod.DELETE,
                "/pipeline/{id}".replace("{" + "id" + "}", "$id")
        )
        val response = request<Any?>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Delete Blob
     * 
     * @param id  
     * @return void
     */
    fun deleteBlobId(id: kotlin.Long): Unit {
        val localVariableConfig = RequestConfig(
                RequestMethod.DELETE,
                "/blob/{id}".replace("{" + "id" + "}", "$id")
        )
        val response = request<Any?>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Delete Group
     * 
     * @param id  
     * @return void
     */
    fun deleteGroupId(id: kotlin.Long): Unit {
        val localVariableConfig = RequestConfig(
                RequestMethod.DELETE,
                "/group/{id}".replace("{" + "id" + "}", "$id")
        )
        val response = request<Any?>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Remove Group Member
     * 
     * @param id  
     * @param memberId  
     * @return void
     */
    fun deleteGroupIdMembersMemberId(id: kotlin.Long, memberId: kotlin.Long): Unit {
        val localVariableConfig = RequestConfig(
                RequestMethod.DELETE,
                "/group/{id}/members/{memberId}".replace("{" + "id" + "}", "$id").replace("{" + "memberId" + "}", "$memberId")
        )
        val response = request<Any?>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Remove Friendship
     * 
     * @param id id of the user making the request 
     * @param friendId id of the (to be) friend of the user 
     * @return void
     */
    fun deleteUserIdFriendsFriendId(id: kotlin.Long, friendId: kotlin.Long): Unit {
        val localVariableConfig = RequestConfig(
                RequestMethod.DELETE,
                "/user/{id}/friends/{friendId}".replace("{" + "id" + "}", "$id").replace("{" + "friendId" + "}", "$friendId")
        )
        val response = request<Any?>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Delete Post
     * 
     * @param id  
     * @param postId  
     * @return void
     */
    fun deleteUserIdPostsPostId(id: kotlin.Long, postId: kotlin.Long): Unit {
        val localVariableConfig = RequestConfig(
                RequestMethod.DELETE,
                "/user/{id}/posts/{postId}".replace("{" + "id" + "}", "$id").replace("{" + "postId" + "}", "$postId")
        )
        val response = request<Any?>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Get Image
     * 
     * @param id  
     * @return Image
     */
    @Suppress("UNCHECKED_CAST")
    fun get Image(id: kotlin.Long): Image {
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/image/{id}".replace("{" + "id" + "}", "$id")
        )
        val response = request<Image>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as Image
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Get Pipeline
     * 
     * @param id  
     * @return Pipeline
     */
    @Suppress("UNCHECKED_CAST")
    fun get Pipeline(id: kotlin.Long): Pipeline {
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/pipeline/{id}".replace("{" + "id" + "}", "$id")
        )
        val response = request<Pipeline>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as Pipeline
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Get Blob
     * 
     * @param id  
     * @return Blob
     */
    @Suppress("UNCHECKED_CAST")
    fun getBlobId(id: kotlin.Long): Blob {
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/blob/{id}".replace("{" + "id" + "}", "$id")
        )
        val response = request<Blob>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as Blob
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Get Group
     * 
     * @param id  
     * @return Group
     */
    @Suppress("UNCHECKED_CAST")
    fun getGroupId(id: kotlin.Long): Group {
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/group/{id}".replace("{" + "id" + "}", "$id")
        )
        val response = request<Group>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as Group
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * List User Posts
     * 
     * @param id  
     * @return kotlin.Array<Post>
     */
    @Suppress("UNCHECKED_CAST")
    fun getUserIdPosts(id: kotlin.Long): kotlin.Array<Post> {
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/user/{id}/posts".replace("{" + "id" + "}", "$id")
        )
        val response = request<kotlin.Array<Post>>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<Post>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Get Post
     * 
     * @param id  
     * @param postId  
     * @return Post
     */
    @Suppress("UNCHECKED_CAST")
    fun getUserIdPostsPostId(id: kotlin.Long, postId: kotlin.Long): Post {
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/user/{id}/posts/{postId}".replace("{" + "id" + "}", "$id").replace("{" + "postId" + "}", "$postId")
        )
        val response = request<Post>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as Post
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * List Group Members
     * 
     * @param id  
     * @return kotlin.Array<User>
     */
    @Suppress("UNCHECKED_CAST")
    fun listGroupMembers(id: kotlin.Long): kotlin.Array<User> {
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/group/{id}/members".replace("{" + "id" + "}", "$id")
        )
        val response = request<kotlin.Array<User>>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<User>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * List User Friends
     * 
     * @param id  
     * @return kotlin.Array<User>
     */
    @Suppress("UNCHECKED_CAST")
    fun listUserIdFriends(id: kotlin.Long): kotlin.Array<User> {
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/user/{id}/friends".replace("{" + "id" + "}", "$id")
        )
        val response = request<kotlin.Array<User>>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as kotlin.Array<User>
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Create Blob
     * 
     * @param body  (optional)
     * @return void
     */
    fun postBlob(body: Blob? = null): Unit {
        val localVariableBody: kotlin.Any? = body
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/blob"
        )
        val response = request<Any?>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Create Group
     * 
     * @param body  (optional)
     * @return void
     */
    fun postGroup(body: Group? = null): Unit {
        val localVariableBody: kotlin.Any? = body
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/group"
        )
        val response = request<Any?>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Add Group Member
     * 
     * @param id  
     * @param memberId  
     * @param body  (optional)
     * @return void
     */
    fun postGroupIdMembersMemberId(id: kotlin.Long, memberId: kotlin.Long, body: GroupMembership? = null): Unit {
        val localVariableBody: kotlin.Any? = body
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/group/{id}/members/{memberId}".replace("{" + "id" + "}", "$id").replace("{" + "memberId" + "}", "$memberId")
        )
        val response = request<Any?>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Send Friendship Invite
     * 
     * @param id id of the user making the request 
     * @param friendId id of the (to be) friend of the user 
     * @return void
     */
    fun postUserIdFriendsFriendId(id: kotlin.Long, friendId: kotlin.Long): Unit {
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/user/{id}/friends/{friendId}".replace("{" + "id" + "}", "$id").replace("{" + "friendId" + "}", "$friendId")
        )
        val response = request<Any?>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Create Post
     * 
     * @param id  
     * @param body  (optional)
     * @return void
     */
    fun postUserIdPosts(id: kotlin.Long, body: kotlin.Any? = null): Unit {
        val localVariableBody: kotlin.Any? = body
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/user/{id}/posts".replace("{" + "id" + "}", "$id")
        )
        val response = request<Any?>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Create Post
     * 
     * @param id  
     * @param body  (optional)
     * @return void
     */
    fun postUserIdPosts(id: kotlin.Long, body: kotlin.Any? = null): Unit {
        val localVariableBody: kotlin.Any? = body
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/user/{id}/posts".replace("{" + "id" + "}", "$id")
        )
        val response = request<Any?>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Update Blob
     * 
     * @param id  
     * @param body  (optional)
     * @return void
     */
    fun putBlobId(id: kotlin.Long, body: Blob? = null): Unit {
        val localVariableBody: kotlin.Any? = body
        val localVariableConfig = RequestConfig(
                RequestMethod.PUT,
                "/blob/{id}".replace("{" + "id" + "}", "$id")
        )
        val response = request<Any?>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Update Group
     * 
     * @param id  
     * @param body  (optional)
     * @return void
     */
    fun putGroupId(id: kotlin.Long, body: Group? = null): Unit {
        val localVariableBody: kotlin.Any? = body
        val localVariableConfig = RequestConfig(
                RequestMethod.PUT,
                "/group/{id}".replace("{" + "id" + "}", "$id")
        )
        val response = request<Any?>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Respond to Friendship Invite
     * 
     * @param id id of the user making the request 
     * @param friendId id of the (to be) friend of the user 
     * @param body  (optional)
     * @return void
     */
    fun putUserIdFriendsFriendId(id: kotlin.Long, friendId: kotlin.Long, body: InviteResponse? = null): Unit {
        val localVariableBody: kotlin.Any? = body
        val localVariableConfig = RequestConfig(
                RequestMethod.PUT,
                "/user/{id}/friends/{friendId}".replace("{" + "id" + "}", "$id").replace("{" + "friendId" + "}", "$friendId")
        )
        val response = request<Any?>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Update Post
     * 
     * @param id  
     * @param postId  
     * @param body  (optional)
     * @return void
     */
    fun putUserIdPostsPostId(id: kotlin.Long, postId: kotlin.Long, body: Post? = null): Unit {
        val localVariableBody: kotlin.Any? = body
        val localVariableConfig = RequestConfig(
                RequestMethod.PUT,
                "/user/{id}/posts/{postId}".replace("{" + "id" + "}", "$id").replace("{" + "postId" + "}", "$postId")
        )
        val response = request<Any?>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Update Image
     * 
     * @param id  
     * @param body  (optional)
     * @return void
     */
    fun update Image(id: kotlin.Long, body: Image? = null): Unit {
        val localVariableBody: kotlin.Any? = body
        val localVariableConfig = RequestConfig(
                RequestMethod.PUT,
                "/image/{id}".replace("{" + "id" + "}", "$id")
        )
        val response = request<Any?>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Update Pipeline
     * 
     * @param id  
     * @param body  (optional)
     * @return void
     */
    fun update Pipeline(id: kotlin.Long, body: Pipeline? = null): Unit {
        val localVariableBody: kotlin.Any? = body
        val localVariableConfig = RequestConfig(
                RequestMethod.PUT,
                "/pipeline/{id}".replace("{" + "id" + "}", "$id")
        )
        val response = request<Any?>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
}
